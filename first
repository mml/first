#!/usr/bin/perl -ws
# See also http://www.nerdylorrin.net/jerry/postages/index.html

require 5;
use strict;
use POSIX 'ceil';

our $zone;
our $lb;
our $dims;

my %box = (
  A => [7.10, 7.25, 7.40, 8.15, 9.47, 10.29, 10.80, 15.33],
  B => [7.41, 8.42, 9.37, 10.65, 16.15, 18.47, 21.03, 29.15]
);

# Breaks at 5, 9, and 13 oz.
my %parcels = (
  1 => [366, 439, 519, 571],
  3 => [370, 444, 524, 578],
  4 => [374, 449, 530, 585],
  5 => [378, 453, 535, 593],
  6 => [382, 457, 540, 599],
  7 => [394, 469, 553, 613],
  8 => [406, 481, 566, 627],
);
$parcels{2} = $parcels{1};
$parcels{9} = $parcels{8};

if ($#ARGV < 0) {
  print "USAGE: first [-zone ZONE] [parcel|letter|flat|postcard|media] <weight in ounces>\n";
  print "       first -lb [-zone ZONE] [parcel|letter|flat|postcard|media] <weight in lbs>\n";
  exit 64;
}

my $oz = shift;
my $type = 'parcel';

if (@ARGV) {
  $type = $oz;
  $oz = shift;
}
if ($oz eq 'postcard') {
  $type = $oz;
  $oz = 0;
}
if ($lb) {
  $oz *= 16;
}

sub price() {
  if ($type eq 'parcel') {
    if ($oz > 13 ) {
      return 0;
    } elsif ($oz < 5) {
      return $parcels{$zone}[0];
    } elsif ($oz < 9) {
      return $parcels{$zone}[1];
    } elsif ($oz < 13) {
      return $parcels{$zone}[2];
    } else {
      return $parcels{$zone}[3];
    }
  } elsif ($type eq 'letter') {
    if ($oz > 3.5) {
      $type = 'flat';
      return &price;
    } elsif ($oz == 3.5) {
      return 100;
    } else {
      return 55 + 15 * ($oz - 1);
    }
  } elsif ($type eq 'flat') {
    if ($oz > 13) {
      return 0;
    } else {
      return 100 + 15 * ($oz - 1);
    }
  } elsif ($type eq 'postcard') {
    return 35;
  } elsif ($type eq 'media') {
    my $lb = ceil($oz / 16);
    return 266 + 51 * ($lb-1);
  } else {
    die "'$type'?";
  }
}

sub ratef($$;@) {
  my($rate, $format, @rest) = @_;

  return (sprintf($format, @rest), $rate);
}

sub updatef(\%$$;@) {
  my($ref, $rate, $format, @rest) = @_;

  my $key = sprintf $format, @rest;
  $ref->{$key} = $rate;
}

print "[$oz oz $type]\n";

unless (defined $zone) {
  $zone = 9;
}


my $price = price();
if ($price == 0) {
  my $lb = ceil($oz/16);

  ROW: while (<DATA>) {
    chomp;
    last ROW if /^\Q${lb}\E\s/;
  }

  die unless defined $_;

  my($lbmatch,@zones) = split ' ';
  my $zone_ix = 0;
  if ($zone !~ /^(Local|1|2)$/) {
    $zone_ix = $zone-2;
  }

  my $znam = 'Local';
  if ($zone ne 'Local') {
    $znam = sprintf "zone%d", $zone;
  }

  my %rate;

  updatef %rate,  7.35,             "        priority envelope";
  updatef %rate,  7.90,             "        priority small box";
  updatef %rate,  8.00,             "        priority padded env";
  updatef %rate, 14.35,             "        priority medium box";
  updatef %rate, 18.90,             "        priority large box";

  updatef %rate, $zones[$zone_ix], "($znam) priority %d lb", $lb;
  if ($lb <= 15) {
    updatef %rate, $box{A}[$zone_ix], "($znam) priority regional A";
  }
  if ($lb <= 20) {
    updatef %rate, $box{B}[$zone_ix], "($znam) priority regional B";
  }

  foreach my $k (sort {$rate{$a} <=> $rate{$b}} (keys %rate)) {
    printf "%-27.27s \$%6.2f\n", $k, $rate{$k};
  }

  if (0) {
    printf "($znam) priority %d lb       \$%6.2f\n\n",  $lb, $zones[$zone_ix];

    printf "        priority envelope   \$%6.2f\n",  6.70;
    printf "($znam) priority regional A \$%6.2f\n",  $box{A}[$zone_ix];
    printf "        priority small box  \$%6.2f\n",  7.20;
    printf "($znam) priority regional B \$%6.2f\n",  $box{B}[$zone_ix];
    printf "        priority padded env \$%6.2f\n",  7.25;
    printf "        priority medium box \$%6.2f\n", 13.65;
    printf "        priority large box  \$%6.2f\n", 18.90;
  }
} else {
  printf "$type $oz oz \$%.2f\n", price() / 100;
}

print "\n8:30AM-5PM M-F, Sat 9-1\n";

if ($dims) {
  my %dim = (
    'A top' => '7 x 10 x 4-3/4',
    'A side' => '10-15/16 x 12-13/16 x 2-3/8',
    'B top' => '10-1/4 x 12 x 5',
    'B side' => '14-3/8 x 15-7/8 x 2-7/8',
    'envelope' => '12-1/2 x 9-1/2',
    'small box' => '5-3/8 x 8-5/8 x 1-5/8',
    'med box top' => '8-1/2 x 11 x 5-/12',
    'med box side' => '11-7/8 x 13-5/8 x 3-3/8',
    'large' => '12 x 12 x 5-1/2',
  );

  sub bysize($$) {
    my(@vals) = map {$dim{$_}} @_;
    foreach (@vals) { s/^(\d+).*/$1/ }
    return $vals[0] <=> $vals[1];
  }

  print "\n";
  foreach my $k (sort bysize keys %dim) {
    printf "%-20.20s %s\n", $k, $dim{$k};
  }
}

#Local,1,2 3 4 5 6 7 8 9
__DATA__
1 7.35 7.70 7.85 8.00 8.20 8.60 9.30 12.20
2 7.85 8.30 9.45 10.40 11.20 13.00 14.20 19.40
3 8.30 9.25 10.50 11.95 12.60 16.10 19.05 25.95
4 8.75 10.15 11.10 13.40 16.45 19.80 22.05 30.05
5 9.80 10.85 11.60 13.70 18.70 22.70 25.45 34.80
6 10.55 11.10 12.30 14.95 20.80 24.65 27.80 39.25
7 11.50 12.60 14.80 18.05 23.05 27.65 31.30 44.15
8 11.85 13.95 16.45 21.70 26.15 30.60 35.00 49.40
9 12.30 15.05 18.20 24.75 28.45 33.05 38.95 54.95
10 13.10 16.15 19.60 26.85 30.75 36.35 42.45 59.90
11 13.95 17.30 21.05 29.00 33.00 40.15 46.60 66.30
12 15.20 18.55 22.60 31.05 35.90 43.40 50.00 71.15
13 16.10 19.65 23.90 32.80 38.55 45.15 51.80 73.70
14 17.10 20.90 25.40 34.90 40.70 47.70 54.40 77.40
15 17.80 22.05 26.85 36.90 42.45 48.75 55.90 79.60
16 18.30 23.25 28.30 38.95 44.80 51.45 59.00 83.95
17 19.15 24.50 29.80 41.00 47.10 54.20 62.10 88.40
18 19.50 25.35 31.05 43.00 49.60 56.80 65.30 92.90
19 20.05 25.95 31.75 44.20 50.55 58.05 66.65 97.30
20 20.90 26.25 32.25 44.90 51.75 60.10 69.75 101.80
21 21.60 26.60 32.70 45.60 52.65 61.10 71.35 104.95
22 22.10 27.20 33.50 46.70 53.80 62.60 73.05 107.55
23 22.60 27.75 34.05 47.45 54.80 63.80 74.35 109.40
24 23.15 28.30 34.85 48.50 55.95 65.40 76.20 112.15
25 23.35 28.80 36.25 49.30 56.65 67.05 77.45 113.95
26 24.30 29.35 37.60 50.30 58.05 68.70 79.90 117.60
27 25.05 29.75 38.75 51.30 58.90 70.30 82.90 122.00
28 25.80 30.15 39.90 52.60 59.65 71.90 86.00 126.60
29 26.60 30.50 40.90 53.35 60.70 73.55 88.35 130.00
30 27.40 30.90 41.85 54.10 62.35 75.25 90.25 132.85
31 28.20 31.20 42.55 54.80 63.30 76.85 92.05 136.60
32 28.50 31.90 43.25 55.40 64.10 78.50 93.95 139.40
33 29.00 32.75 44.35 56.15 65.35 80.15 95.70 142.05
34 29.25 33.65 45.45 57.35 66.85 81.80 97.50 144.65
35 29.55 34.45 46.05 58.60 68.65 83.40 99.10 147.10
36 29.85 35.40 46.70 59.80 70.45 84.55 100.85 149.60
37 30.15 36.05 47.35 60.90 72.25 85.65 102.50 152.10
38 30.50 36.95 47.95 62.10 74.25 86.70 104.15 154.55
39 30.80 37.80 48.55 63.40 76.05 88.90 105.70 156.85
40 31.15 38.60 49.20 64.75 77.25 90.90 107.20 159.05
