#!/usr/bin/perl -ws
# See also http://www.nerdylorrin.net/jerry/postages/index.html

require 5;
use strict;
use POSIX 'ceil';

our $zone;
our $lb;
our $dims;

my %box = (
  A => [7.10, 7.25, 7.40, 8.15, 9.47, 10.29, 10.80, 15.33],
  B => [7.41, 8.42, 9.37, 10.65, 16.15, 18.47, 21.03, 29.15]
);

# Breaks at 5, 9, and 13 oz.
my %parcels = (
  1 => [366, 439, 519, 571],
  3 => [370, 444, 524, 578],
  4 => [374, 449, 530, 585],
  5 => [378, 453, 535, 593],
  6 => [382, 457, 540, 599],
  7 => [394, 469, 553, 613],
  8 => [406, 481, 566, 627],
);
$parcels{2} = $parcels{1};
$parcels{9} = $parcels{8};

if ($#ARGV < 0) {
  print "USAGE: first [-zone ZONE] [parcel|letter|flat|postcard|media] <weight in ounces>\n";
  print "       first -lb [-zone ZONE] [parcel|letter|flat|postcard|media] <weight in lbs>\n";
  exit 64;
}

my $oz = shift;
my $type = 'parcel';

if (@ARGV) {
  $type = $oz;
  $oz = shift;
}
if ($oz eq 'postcard') {
  $type = $oz;
  $oz = 0;
}
if ($lb) {
  $oz *= 16;
}

sub price() {
  if ($type eq 'parcel') {
    if ($oz > 13 ) {
      return 0;
    } elsif ($oz < 5) {
      return $parcels{$zone}[0];
    } elsif ($oz < 9) {
      return $parcels{$zone}[1];
    } elsif ($oz < 13) {
      return $parcels{$zone}[2];
    } else {
      return $parcels{$zone}[3];
    }
  } elsif ($type eq 'letter') {
    if ($oz > 3.5) {
      $type = 'flat';
      return &price;
    } elsif ($oz == 3.5) {
      return 100;
    } else {
      return 55 + 15 * ($oz - 1);
    }
  } elsif ($type eq 'flat') {
    if ($oz > 13) {
      return 0;
    } else {
      return 100 + 15 * ($oz - 1);
    }
  } elsif ($type eq 'postcard') {
    return 35;
  } elsif ($type eq 'media') {
    my $lb = ceil($oz / 16);
    return 266 + 51 * ($lb-1);
  } else {
    die "'$type'?";
  }
}

sub ratef($$;@) {
  my($rate, $format, @rest) = @_;

  return (sprintf($format, @rest), $rate);
}

sub updatef(\%$$;@) {
  my($ref, $rate, $format, @rest) = @_;

  my $key = sprintf $format, @rest;
  $ref->{$key} = $rate;
}

print "[$oz oz $type]\n";

unless (defined $zone) {
  $zone = 9;
}


my $price = price();
if ($price == 0) {
  my $lb = ceil($oz/16);

  ROW: while (<DATA>) {
    chomp;
    last ROW if /^\Q${lb}\E\s/;
  }

  die unless defined $_;

  my($lbmatch,@zones) = split ' ';
  my $zone_ix = 0;
  if ($zone !~ /^(Local|1|2)$/) {
    $zone_ix = $zone-2;
  }

  my $znam = 'Local';
  if ($zone ne 'Local') {
    $znam = sprintf "zone%d", $zone;
  }

  my %rate;

  updatef %rate,  7.35,             "        priority envelope";
  updatef %rate,  7.90,             "        priority small box";
  updatef %rate,  8.00,             "        priority padded env";
  updatef %rate, 14.35,             "        priority medium box";
  updatef %rate, 18.90,             "        priority large box";

  updatef %rate, $zones[$zone_ix], "($znam) priority %d lb", $lb;
  if ($lb <= 15) {
    updatef %rate, $box{A}[$zone_ix], "($znam) priority regional A";
  }
  if ($lb <= 20) {
    updatef %rate, $box{B}[$zone_ix], "($znam) priority regional B";
  }

  foreach my $k (sort {$rate{$a} <=> $rate{$b}} (keys %rate)) {
    printf "%-27.27s \$%6.2f\n", $k, $rate{$k};
  }

  if (0) {
    printf "($znam) priority %d lb       \$%6.2f\n\n",  $lb, $zones[$zone_ix];

    printf "        priority envelope   \$%6.2f\n",  6.70;
    printf "($znam) priority regional A \$%6.2f\n",  $box{A}[$zone_ix];
    printf "        priority small box  \$%6.2f\n",  7.20;
    printf "($znam) priority regional B \$%6.2f\n",  $box{B}[$zone_ix];
    printf "        priority padded env \$%6.2f\n",  7.25;
    printf "        priority medium box \$%6.2f\n", 13.65;
    printf "        priority large box  \$%6.2f\n", 18.90;
  }
} else {
  printf "$type $oz oz \$%.2f\n", price() / 100;
}

print "\n8:30AM-5PM M-F, Sat 9-1\n";

if ($dims) {
  my %dim = (
    'A top' => '7 x 10 x 4-3/4',
    'A side' => '10-15/16 x 12-13/16 x 2-3/8',
    'B top' => '10-1/4 x 12 x 5',
    'B side' => '14-3/8 x 15-7/8 x 2-7/8',
    'envelope' => '12-1/2 x 9-1/2',
    'small box' => '5-3/8 x 8-5/8 x 1-5/8',
    'med box top' => '8-1/2 x 11 x 5-/12',
    'med box side' => '11-7/8 x 13-5/8 x 3-3/8',
    'large' => '12 x 12 x 5-1/2',
  );

  sub bysize($$) {
    my(@vals) = map {$dim{$_}} @_;
    foreach (@vals) { s/^(\d+).*/$1/ }
    return $vals[0] <=> $vals[1];
  }

  print "\n";
  foreach my $k (sort bysize keys %dim) {
    printf "%-20.20s %s\n", $k, $dim{$k};
  }
}

#Local,1,2 3 4 5 6 7 8 9
__DATA__
1 6.70 7.15 7.30 7.45 7.60 7.85 8.45 10.60
2 7.25 7.70 8.75 9.85 10.65 11.80 12.90 16.85
3 7.90 8.80 10.15 11.75 13.35 14.65 17.30 22.55
4 8.50 9.90 11.15 13.50 16.45 18.00 20.05 26.15
5 9.85 10.95 11.95 14.15 18.70 20.65 23.15 30.25
6 10.40 11.30 12.50 15.10 20.80 22.40 25.25 34.15
7 11.10 12.15 14.30 18.05 23.05 25.15 28.45 38.40
8 11.45 13.50 15.90 20.95 25.25 27.80 31.80 42.95
9 11.90 14.55 17.60 23.90 27.50 30.05 35.40 47.80
10 12.65 15.60 18.95 25.95 29.70 33.05 38.60 52.10
11 13.50 16.70 20.35 28.00 31.90 36.50 42.35 57.65
12 14.70 17.90 21.85 30.00 34.70 39.45 45.45 61.85
13 15.55 19.00 23.10 31.70 37.25 41.05 47.10 64.10
14 16.50 20.20 24.55 33.70 39.30 43.35 49.45 67.30
15 17.20 21.30 25.95 35.65 41.00 44.30 50.80 69.20
16 17.70 22.45 27.35 37.65 43.30 46.75 53.65 73.00
17 18.50 23.65 28.80 39.60 45.50 49.25 56.45 76.85
18 18.85 24.50 30.00 41.55 47.90 51.65 59.35 80.80
19 19.35 25.05 30.70 42.70 48.85 52.75 60.60 84.60
20 20.20 25.35 31.15 43.40 50.00 54.65 63.40 88.50
21 20.85 25.70 31.60 44.05 50.85 55.55 64.85 91.25
22 21.35 26.30 32.35 45.10 52.00 56.90 66.40 93.50
23 21.85 26.80 32.90 45.85 52.95 58.00 67.60 95.15
24 22.35 27.35 33.65 46.85 54.05 59.45 69.25 97.50
25 22.55 27.85 35.00 47.65 54.75 60.95 70.40 99.10
26 23.50 28.35 36.35 48.60 56.10 62.45 72.65 102.25
27 24.20 28.75 37.45 49.55 56.90 63.90 75.35 106.10
28 24.95 29.15 38.55 50.80 57.65 65.35 78.20 110.10
29 25.70 29.45 39.50 51.55 58.65 66.85 80.30 113.05
30 26.45 29.85 40.45 52.25 60.25 68.40 82.05 115.50
31 27.25 30.15 41.10 52.95 61.15 69.85 83.70 118.80
32 27.55 30.80 41.80 53.55 61.95 71.35 85.40 121.20
33 28.00 31.65 42.85 54.25 63.15 72.85 87.00 123.50
34 28.25 32.50 43.90 55.40 64.60 74.35 88.65 125.80
35 28.55 33.30 44.50 56.60 66.35 75.80 90.10 127.90
36 28.85 34.20 45.10 57.80 68.05 76.85 91.70 130.10
37 29.15 34.85 45.75 58.85 69.80 77.85 93.20 132.25
38 29.45 35.70 46.35 60.00 71.75 78.80 94.70 134.40
39 29.75 36.50 46.90 61.25 73.50 80.80 96.10 136.40
40 30.10 37.30 47.55 62.55 74.65 82.65 97.45 138.30
